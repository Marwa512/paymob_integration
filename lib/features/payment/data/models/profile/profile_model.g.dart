// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'profile_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$ProfileModelImpl _$$ProfileModelImplFromJson(Map<String, dynamic> json) =>
    _$ProfileModelImpl(
      profile: json['profile'] == null
          ? null
          : Profile.fromJson(json['profile'] as Map<String, dynamic>),
      token: json['token'] as String?,
    );

Map<String, dynamic> _$$ProfileModelImplToJson(_$ProfileModelImpl instance) =>
    <String, dynamic>{
      'profile': instance.profile,
      'token': instance.token,
    };

_$ProfileImpl _$$ProfileImplFromJson(Map<String, dynamic> json) =>
    _$ProfileImpl(
      id: (json['id'] as num?)?.toInt(),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      active: json['active'] as bool?,
      profileType: json['profileType'] as String?,
      phones:
          (json['phones'] as List<dynamic>?)?.map((e) => e as String).toList(),
      companyEmails: (json['companyEmails'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      companyName: json['companyName'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      city: json['city'] as String?,
      postalCode: json['postalCode'] as String?,
      street: json['street'] as String?,
      emailNotification: json['emailNotification'] as bool?,
      orderRetrievalEndpoint: json['orderRetrievalEndpoint'],
      deliveryUpdateEndpoint: json['deliveryUpdateEndpoint'],
      logoUrl: json['logoUrl'] as String?,
      isMobadra: json['isMobadra'] as bool?,
      sector: json['sector'] as String?,
      is2faEnabled: json['is2faEnabled'] as bool?,
      otpSentTo: json['otpSentTo'],
      activationMethod: (json['activationMethod'] as num?)?.toInt(),
      signedUpThrough: (json['signedUpThrough'] as num?)?.toInt(),
      failedAttempts: (json['failedAttempts'] as num?)?.toInt(),
      username: json['username'],
      primaryPhoneNumber: json['primaryPhoneNumber'],
      primaryPhoneVerified: json['primaryPhoneVerified'] as bool?,
      isTempPassword: json['isTempPassword'] as bool?,
      otp2faSentAt: json['otp2faSentAt'],
      otp2faAttempt: json['otp2faAttempt'],
      otpSentAt: json['otpSentAt'],
      otpValidatedAt: json['otpValidatedAt'],
      awbBanner: json['awbBanner'],
      emailBanner: json['emailBanner'],
      identificationNumber: json['identificationNumber'],
      deliveryStatusCallback: json['deliveryStatusCallback'] as String?,
      merchantExternalLink: json['merchantExternalLink'],
      merchantStatus: (json['merchantStatus'] as num?)?.toInt(),
      deactivatedByBank: json['deactivatedByBank'] as bool?,
      bankDeactivationReason: json['bankDeactivationReason'],
      bankMerchantStatus: (json['bankMerchantStatus'] as num?)?.toInt(),
      nationalId: json['nationalId'],
      superAgent: json['superAgent'],
      walletLimitProfile: json['walletLimitProfile'],
      address: json['address'],
      commercialRegistration: json['commercialRegistration'],
      commercialRegistrationArea: json['commercialRegistrationArea'],
      distributorCode: json['distributorCode'],
      distributorBranchCode: json['distributorBranchCode'],
      allowTerminalOrderId: json['allowTerminalOrderId'] as bool?,
      allowEncryptionBypass: json['allowEncryptionBypass'] as bool?,
      walletPhoneNumber: json['walletPhoneNumber'],
      suspicious: (json['suspicious'] as num?)?.toInt(),
      latitude: json['latitude'],
      longitude: json['longitude'],
      bankRejectionReason: json['bankRejectionReason'],
      bankReceivedDocuments: json['bankReceivedDocuments'] as bool?,
      bankMerchantDigitalStatus:
          (json['bankMerchantDigitalStatus'] as num?)?.toInt(),
      bankDigitalRejectionReason: json['bankDigitalRejectionReason'],
      filledBusinessData: json['filledBusinessData'] as bool?,
      dayStartTime: json['dayStartTime'] as String?,
      dayEndTime: json['dayEndTime'],
      withholdTransfers: json['withholdTransfers'] as bool?,
      manualSettlement: json['manualSettlement'] as bool?,
      smsSenderName: json['smsSenderName'] as String?,
      withholdTransfersReason: json['withholdTransfersReason'],
      withholdTransfersNotes: json['withholdTransfersNotes'],
      canBillDepositWithCard: json['canBillDepositWithCard'] as bool?,
      canTopupMerchants: json['canTopupMerchants'] as bool?,
      topupTransferId: json['topupTransferId'],
      referralEligible: json['referralEligible'] as bool?,
      isEligibleToBeRanger: json['isEligibleToBeRanger'] as bool?,
      isRanger: json['isRanger'] as bool?,
      isPoaching: json['isPoaching'] as bool?,
      paymobAppMerchant: json['paymobAppMerchant'] as bool?,
      settlementFrequency: json['settlementFrequency'],
      dayOfTheWeek: json['dayOfTheWeek'],
      dayOfTheMonth: json['dayOfTheMonth'],
      allowTransactionNotifications:
          json['allowTransactionNotifications'] as bool?,
      allowTransferNotifications: json['allowTransferNotifications'] as bool?,
      sallefnyAmountWhole: (json['sallefnyAmountWhole'] as num?)?.toInt(),
      sallefnyFeesWhole: (json['sallefnyFeesWhole'] as num?)?.toInt(),
      paymobAppFirstLogin: json['paymobAppFirstLogin'],
      paymobAppLastActivity: json['paymobAppLastActivity'],
      payoutEnabled: json['payoutEnabled'] as bool?,
      payoutTerms: json['payoutTerms'] as bool?,
      isBillsNew: json['isBillsNew'] as bool?,
      canProcessMultipleRefunds: json['canProcessMultipleRefunds'] as bool?,
      settlementClassification:
          (json['settlementClassification'] as num?)?.toInt(),
      instantSettlementEnabled: json['instantSettlementEnabled'] as bool?,
      instantSettlementTransactionOtpVerified:
          json['instantSettlementTransactionOtpVerified'] as bool?,
      preferredLanguage: json['preferredLanguage'] as String?,
      ignoreFlashCallbacks: json['ignoreFlashCallbacks'] as bool?,
      acqPartner: json['acqPartner'],
      dom: json['dom'],
      bankRelated: json['bankRelated'],
    );

Map<String, dynamic> _$$ProfileImplToJson(_$ProfileImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'user': instance.user,
      'createdAt': instance.createdAt,
      'active': instance.active,
      'profileType': instance.profileType,
      'phones': instance.phones,
      'companyEmails': instance.companyEmails,
      'companyName': instance.companyName,
      'state': instance.state,
      'country': instance.country,
      'city': instance.city,
      'postalCode': instance.postalCode,
      'street': instance.street,
      'emailNotification': instance.emailNotification,
      'orderRetrievalEndpoint': instance.orderRetrievalEndpoint,
      'deliveryUpdateEndpoint': instance.deliveryUpdateEndpoint,
      'logoUrl': instance.logoUrl,
      'isMobadra': instance.isMobadra,
      'sector': instance.sector,
      'is2faEnabled': instance.is2faEnabled,
      'otpSentTo': instance.otpSentTo,
      'activationMethod': instance.activationMethod,
      'signedUpThrough': instance.signedUpThrough,
      'failedAttempts': instance.failedAttempts,
      'username': instance.username,
      'primaryPhoneNumber': instance.primaryPhoneNumber,
      'primaryPhoneVerified': instance.primaryPhoneVerified,
      'isTempPassword': instance.isTempPassword,
      'otp2faSentAt': instance.otp2faSentAt,
      'otp2faAttempt': instance.otp2faAttempt,
      'otpSentAt': instance.otpSentAt,
      'otpValidatedAt': instance.otpValidatedAt,
      'awbBanner': instance.awbBanner,
      'emailBanner': instance.emailBanner,
      'identificationNumber': instance.identificationNumber,
      'deliveryStatusCallback': instance.deliveryStatusCallback,
      'merchantExternalLink': instance.merchantExternalLink,
      'merchantStatus': instance.merchantStatus,
      'deactivatedByBank': instance.deactivatedByBank,
      'bankDeactivationReason': instance.bankDeactivationReason,
      'bankMerchantStatus': instance.bankMerchantStatus,
      'nationalId': instance.nationalId,
      'superAgent': instance.superAgent,
      'walletLimitProfile': instance.walletLimitProfile,
      'address': instance.address,
      'commercialRegistration': instance.commercialRegistration,
      'commercialRegistrationArea': instance.commercialRegistrationArea,
      'distributorCode': instance.distributorCode,
      'distributorBranchCode': instance.distributorBranchCode,
      'allowTerminalOrderId': instance.allowTerminalOrderId,
      'allowEncryptionBypass': instance.allowEncryptionBypass,
      'walletPhoneNumber': instance.walletPhoneNumber,
      'suspicious': instance.suspicious,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'bankRejectionReason': instance.bankRejectionReason,
      'bankReceivedDocuments': instance.bankReceivedDocuments,
      'bankMerchantDigitalStatus': instance.bankMerchantDigitalStatus,
      'bankDigitalRejectionReason': instance.bankDigitalRejectionReason,
      'filledBusinessData': instance.filledBusinessData,
      'dayStartTime': instance.dayStartTime,
      'dayEndTime': instance.dayEndTime,
      'withholdTransfers': instance.withholdTransfers,
      'manualSettlement': instance.manualSettlement,
      'smsSenderName': instance.smsSenderName,
      'withholdTransfersReason': instance.withholdTransfersReason,
      'withholdTransfersNotes': instance.withholdTransfersNotes,
      'canBillDepositWithCard': instance.canBillDepositWithCard,
      'canTopupMerchants': instance.canTopupMerchants,
      'topupTransferId': instance.topupTransferId,
      'referralEligible': instance.referralEligible,
      'isEligibleToBeRanger': instance.isEligibleToBeRanger,
      'isRanger': instance.isRanger,
      'isPoaching': instance.isPoaching,
      'paymobAppMerchant': instance.paymobAppMerchant,
      'settlementFrequency': instance.settlementFrequency,
      'dayOfTheWeek': instance.dayOfTheWeek,
      'dayOfTheMonth': instance.dayOfTheMonth,
      'allowTransactionNotifications': instance.allowTransactionNotifications,
      'allowTransferNotifications': instance.allowTransferNotifications,
      'sallefnyAmountWhole': instance.sallefnyAmountWhole,
      'sallefnyFeesWhole': instance.sallefnyFeesWhole,
      'paymobAppFirstLogin': instance.paymobAppFirstLogin,
      'paymobAppLastActivity': instance.paymobAppLastActivity,
      'payoutEnabled': instance.payoutEnabled,
      'payoutTerms': instance.payoutTerms,
      'isBillsNew': instance.isBillsNew,
      'canProcessMultipleRefunds': instance.canProcessMultipleRefunds,
      'settlementClassification': instance.settlementClassification,
      'instantSettlementEnabled': instance.instantSettlementEnabled,
      'instantSettlementTransactionOtpVerified':
          instance.instantSettlementTransactionOtpVerified,
      'preferredLanguage': instance.preferredLanguage,
      'ignoreFlashCallbacks': instance.ignoreFlashCallbacks,
      'acqPartner': instance.acqPartner,
      'dom': instance.dom,
      'bankRelated': instance.bankRelated,
    };

_$UserImpl _$$UserImplFromJson(Map<String, dynamic> json) => _$UserImpl(
      id: (json['id'] as num?)?.toInt(),
      username: json['username'] as String?,
      firstName: json['firstName'] as String?,
      lastName: json['lastName'] as String?,
      dateJoined: json['dateJoined'] as String?,
      email: json['email'] as String?,
      isActive: json['isActive'] as bool?,
      isStaff: json['isStaff'] as bool?,
      isSuperuser: json['isSuperuser'] as bool?,
      lastLogin: json['lastLogin'],
      userPermissions: (json['userPermissions'] as List<dynamic>?)
          ?.map((e) => (e as num).toInt())
          .toList(),
    );

Map<String, dynamic> _$$UserImplToJson(_$UserImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'username': instance.username,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'dateJoined': instance.dateJoined,
      'email': instance.email,
      'isActive': instance.isActive,
      'isStaff': instance.isStaff,
      'isSuperuser': instance.isSuperuser,
      'lastLogin': instance.lastLogin,
      'userPermissions': instance.userPermissions,
    };
